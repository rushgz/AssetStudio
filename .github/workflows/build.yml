name: AssetStudioBuild

on:
  push:
    branches: [ master ]
    tags:
      - 'v*' # 匹配所有以v开头的标签，如v1.0.0
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 不使用 microsoft/setup-msbuild action，而是直接在 Windows 环境中查找 MSBuild
      - name: Setup MSBuild Path
        shell: powershell
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -prerelease -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          if ($vsPath) {
            Write-Host "Found MSBuild at: $vsPath"
            echo "MSBUILD_PATH=$vsPath" >> $env:GITHUB_ENV
            # 将 MSBuild 目录添加到 PATH
            $msbuildDir = Split-Path -Parent $vsPath
            echo "$msbuildDir" >> $env:GITHUB_PATH
          } else {
            Write-Error "MSBuild not found!"
            exit 1
          }
      
      - name: Download FBX SDK
        run: |
          md fbx
          cd fbx
          Invoke-WebRequest "https://damassets.autodesk.net/content/dam/autodesk/www/adn/fbx/2020-2-1/fbx202021_fbxsdk_vs2019_win.exe" -OutFile "fbxsdk.exe"
          Start-Process -FilePath "fbxsdk.exe" /S -Wait
          Invoke-WebRequest "https://damassets.autodesk.net/content/dam/autodesk/www/adn/fbx/2020-2-1/fbx202021_fbxsdk_vs2019_pdbs.exe" -OutFile "fbxpdb.exe"
          Start-Process -FilePath "fbxpdb.exe" /S -Wait
          cd ..

      - name: Nuget Restore
        run: nuget restore
      
      - name: Build .Net6
        run: msbuild /t:AssetStudioGUI:publish /p:Configuration=Release /p:TargetFramework=net6.0-windows /p:SelfContained=false /verbosity:minimal

      - name: Upload .Net6 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AssetStudio.net6
          path: AssetStudioGUI/bin/Release/net6.0-windows/publish

      - name: Extract tag name
        if: startsWith(github.ref, 'refs/tags/')
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir release
          xcopy /E /I AssetStudioGUI\bin\Release\net6.0-windows\publish\* release\
          cd release
          7z a -tzip ..\AssetStudio-${{ steps.get_tag.outputs.TAG_NAME }}.zip *
          cd ..

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: AssetStudio ${{ steps.get_tag.outputs.TAG_NAME }}
          files: |
            AssetStudio-${{ steps.get_tag.outputs.TAG_NAME }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
